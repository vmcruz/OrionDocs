11:25:56.585 | OrionDocs Inf: <Full debug> mode enabled
11:25:56.590 | OrionDocs Inf: 'Fancy_en' template selected
11:25:56.639 | OrionDocs Inf: 'Fancy_en' template loaded
11:25:56.640 | OrionDocs Inf: 'config' section loaded
11:25:56.640 | OrionDocs Inf: Directories: img, css, fa, js, prism will be copied at the end
11:25:56.640 | OrionDocs Inf: First line will be treated as @description
11:25:56.640 | OrionDocs Inf: The project files will have '.html' extension
11:25:56.641 | OrionDocs Inf: 'goto' special tag loaded from goto.ott
11:25:56.641 | OrionDocs Inf: Valid block types are: class, method, singleton, function
11:25:56.641 | OrionDocs Inf: Default project title is: '{FILENAME} | Documentation'
11:25:56.642 | OrionDocs Inf: File 'InfluxDB.php' loaded
11:25:56.645 | OrionDocs Inf: 9 comment blocks were found
11:25:56.645 | OrionDocs Inf: Working on comment block #1
11:25:56.645 | OrionDocs Inf: 22 tags were found
11:25:56.666 | OrionDocs Inf: Comment Block #1 is:
11:25:56.669 | Type: @class
Tags: {
	@class
	Groups: {
		0 = InfluxDB.__construct
		1 = __construct
		2 = __construct
	}
	@description
	Groups: {
		0 = Permite crear una nueva instancia de InfluxDB
		1 = Permite crear una nueva instancia de InfluxDB
	}
	@prop
	Groups: {
		0 = {private String} host - Servidor al que InfluxDB debe conectarse (dirección ip o nombre de dominio)
		1 = private
		2 = String
		3 = String
		4 = host
		5 = Servidor al que InfluxDB debe conectarse (dirección ip o nombre de dominio)
	}
	@prop
	Groups: {
		0 = {private Integer} port - Puerto al que se ha de conectar
		1 = private
		2 = Integer
		3 = Integer
		4 = port
		5 = Puerto al que se ha de conectar
	}
	@prop
	Groups: {
		0 = {private String} user - Usuario que se usa para la conexión
		1 = private
		2 = String
		3 = String
		4 = user
		5 = Usuario que se usa para la conexión
	}
	@prop
	Groups: {
		0 = {private String} password - Contraseña de acceso
		1 = private
		2 = String
		3 = String
		4 = password
		5 = Contraseña de acceso
	}
	@prop
	Groups: {
		0 = {private String} db - Base de datos a la que InfluxDB se conecta
		1 = private
		2 = String
		3 = String
		4 = db
		5 = Base de datos a la que InfluxDB se conecta
	}
	@prop
	Groups: {
		0 = {private Integer} errno - Indica el código de error generado, en caso de que lo hubiera
		1 = private
		2 = Integer
		3 = Integer
		4 = errno
		5 = Indica el código de error generado, en caso de que lo hubiera
	}
	@prop
	Groups: {
		0 = {private String} errstr - Indica el mensaje de error generado, en caso de que lo hubiera
		1 = private
		2 = String
		3 = String
		4 = errstr
		5 = Indica el mensaje de error generado, en caso de que lo hubiera
	}
	@prop
	Groups: {
		0 = {private String} errtype - Indica el tipo de error generado (librería, curl o servidor), en caso de que lo hubiera
		1 = private
		2 = String
		3 = String
		4 = errtype
		5 = Indica el tipo de error generado (librería, curl o servidor), en caso de que lo hubiera
	}
	@prop
	Groups: {
		0 = {private String} precision - Almacena la precisión con la que InfluxDB representará el tiempo (timestamp)
		1 = private
		2 = String
		3 = String
		4 = precision
		5 = Almacena la precisión con la que InfluxDB representará el tiempo (timestamp)
	}
	@param
	Groups: {
		0 = {String} db - Base de datos a la que se desea conectar de InfluxDB
		1 = String
		2 = String
		3 = db
		4 = Base de datos a la que se desea conectar de InfluxDB
	}
	@param
	Groups: {
		0 = {String} user - Usuario de la base de datos
		1 = String
		2 = String
		3 = user
		4 = Usuario de la base de datos
	}
	@param
	Groups: {
		0 = {String} password - Contraseña del usuario de la base de datos
		1 = String
		2 = String
		3 = password
		4 = Contraseña del usuario de la base de datos
	}
	@param
	Groups: {
		0 = {String} host - Servidor donde se encuentra InfluxDB. Opcional, por defecto "localhost"
		1 = String
		2 = String
		3 = host
		4 = Servidor donde se encuentra InfluxDB. Opcional, por defecto "localhost"
	}
	@param
	Groups: {
		0 = {String} port - Puerto de la API HTTP de InfluxDB. Opcional, por defecto "8086"
		1 = String
		2 = String
		3 = port
		4 = Puerto de la API HTTP de InfluxDB. Opcional, por defecto "8086"
	}
	@example
	Groups: {
		0 = Ej. Nueva instancia de InfluxDB ~ $influx = <b>new InfluxDB("umidb", "umidev", "desarrollo123", "192.168.1.99")</b>;
		1 = Ej. Nueva instancia de InfluxDB
		2 = $influx = <b>new InfluxDB("umidb", "umidev", "desarrollo123", "192.168.1.99")</b>;
	}
	@version
	Groups: {
		0 = 0.3.0b
		1 = 0.3.0b
	}
	@contact
	Groups: {
		0 = vmcruz16@gmail.com
		1 = vmcruz16@gmail.com
	}
	@created
	Groups: {
		0 = 22/04/2016
		1 = 22/04/2016
	}
	@updated
	Groups: {
		0 = 27/04/2016
		1 = 27/04/2016
	}
	@sourcecode
	Groups: {
		0 = private $host;
 private $port;
 private $user;
 private $password;
 private $db;
 private $errno;
 private $errstr;
 private $errtype;
 private $precision;
 &nbsp;
 public function __construct($db = false, $user = "", $password = "", $host = "localhost", $port = "8086")  {
     if($db) {
         $this->host = $host;
         $this->port = $port;
         $this->user = $user;
         $this->password = $password;
         $this->db = $db;
         $this->precision = false;
     } else {
         $this->errno = 0;
         $this->errstr = "No database selected";
         $this->errtype = "lib";
     }
 }

		1 = private $host;
 private $port;
 private $user;
 private $password;
 private $db;
 private $errno;
 private $errstr;
 private $errtype;
 private $precision;
 &nbsp;
 public function __construct($db = false, $user = "", $password = "", $host = "localhost", $port = "8086")  {
     if($db) {
         $this->host = $host;
         $this->port = $port;
         $this->user = $user;
         $this->password = $password;
         $this->db = $db;
         $this->precision = false;
     } else {
         $this->errno = 0;
         $this->errstr = "No database selected";
         $this->errtype = "lib";
     }
 }

		2 = 32
		3 = 55
	}
}

11:25:56.688 | OrionDocs Inf: Working on comment block #2
11:25:56.690 | OrionDocs Inf: 6 tags were found
11:25:56.693 | OrionDocs Inf: Comment Block #2 is:
11:25:56.693 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.setPrecision
		1 = setPrecision
		2 = setPrecision
	}
	@description
	Groups: {
		0 = Especifica la precisión en la que InfluxDB devolverá el timestamp en los queries. Por defecto, InfluxDB devolverá el timestamp en nanosegundos.
Para especificar una precisión diferente consultar la documentación de InfluxDB: <a href="https://docs.influxdata.com/influxdb/v0.12/guides/querying_data/#other-options-when-querying-data" class="fancy-goto" target="_blank">InfluxDB - Other options when querying data</a>
		1 = Especifica la precisión en la que InfluxDB devolverá el timestamp en los queries. Por defecto, InfluxDB devolverá el timestamp en nanosegundos.
Para especificar una precisión diferente consultar la documentación de InfluxDB: <a href="https://docs.influxdata.com/influxdb/v0.12/guides/querying_data/#other-options-when-querying-data" class="fancy-goto" target="_blank">InfluxDB - Other options when querying data</a>
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@param
	Groups: {
		0 = {String} precision - La precisión que se desea utilizar en los queries
		1 = String
		2 = String
		3 = precision
		4 = La precisión que se desea utilizar en los queries
	}
	@example
	Groups: {
		0 = Ej. Especificar precisión en segundos ~ $influx = new InfluxDB("estaciones", "umidev", "desarrollo123", "localhost");
<b>$influx->setPrecision("s")</b>;
		1 = Ej. Especificar precisión en segundos
		2 = $influx = new InfluxDB("estaciones", "umidev", "desarrollo123", "localhost");
<b>$influx->setPrecision("s")</b>;
	}
	@sourcecode
	Groups: {
		0 = public function setPrecision($precision = false) {
     if($precision) {
         $this->precision = $precision;
     }
 }

		1 = public function setPrecision($precision = false) {
     if($precision) {
         $this->precision = $precision;
     }
 }

		2 = 67
		3 = 71
	}
}

11:25:56.694 | OrionDocs Inf: Working on comment block #3
11:25:56.694 | OrionDocs Inf: 9 tags were found
11:25:56.698 | OrionDocs Inf: Comment Block #3 is:
11:25:56.698 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.query
		1 = query
		2 = query
	}
	@description
	Groups: {
		0 = Ejecuta un query en InfluxDB y devuelve el resultado del query
		1 = Ejecuta un query en InfluxDB y devuelve el resultado del query
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@param
	Groups: {
		0 = {String} query - El query que se desea ejecutar
		1 = String
		2 = String
		3 = query
		4 = El query que se desea ejecutar
	}
	@param
	Groups: {
		0 = {Boolean} pretty - Especifica si el resultado se devuelve en un json para debuggeo o no. Opcional, por defecto "false"
		1 = Boolean
		2 = Boolean
		3 = pretty
		4 = Especifica si el resultado se devuelve en un json para debuggeo o no. Opcional, por defecto "false"
	}
	@example
	Groups: {
		0 = Ej. Seleccionar todos los datos de la variable "cpu" ~ $result = <b>$influx->query("select * from cpu")</b>;
		1 = Ej. Seleccionar todos los datos de la variable "cpu"
		2 = $result = <b>$influx->query("select * from cpu")</b>;
	}
	@returns
	Groups: {
		0 = {Boolean} <i>False</i> Cuando un error ocurre
		1 = Boolean
		2 = Boolean
		3 = <i>False</i> Cuando un error ocurre
	}
	@returns
	Groups: {
		0 = {Array[]} Arreglo asociativo de los valores devueltos por InfluxDB
		1 = Array[]
		2 = Array
		3 = Arreglo asociativo de los valores devueltos por InfluxDB
	}
	@sourcecode
	Groups: {
		0 = public function query($query = false, $pretty = false) {
     if($query) {
         $curl_handler = curl_init();
         $fullUrl = array (
                         "pretty" => $pretty,
                         "db" => $this->db,
                         "u" => $this->user,
                         "p" => $this->password,
                         "q" => $query,
                         "epoch" => $this->precision
                     );
         curl_setopt($curl_handler, CURLOPT_URL, "http://{$this->host}:{$this->port}/query?" . http_build_query($fullUrl));
         curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, TRUE);
         $response = curl_exec($curl_handler);
         $errno = curl_errno($curl_handler);
         &nbsp;
         if(!$errno) {
             $httpCode = curl_getinfo($curl_handler, CURLINFO_HTTP_CODE);
             $response = json_decode($response, true);
             &nbsp;
             if($httpCode == "200") {
                 curl_close($curl_handler);
                 return $response;
             }
             else {
                 $this->errno = $httpCode;
                 $this->errstr = $response["error"];
                 $this->errtype = "influxdb";
                 return false;
             }
         } else {
             $this->errno = $errno;
             $this->errstr = "curl error";
             $this->errtype = "curl";
             return false;
         }
     } else {
         $this->errno = 1;
         $this->errstr = "Undefined query";
         $this->errtype = "lib";
         return false;
     }
 }

		1 = public function query($query = false, $pretty = false) {
     if($query) {
         $curl_handler = curl_init();
         $fullUrl = array (
                         "pretty" => $pretty,
                         "db" => $this->db,
                         "u" => $this->user,
                         "p" => $this->password,
                         "q" => $query,
                         "epoch" => $this->precision
                     );
         curl_setopt($curl_handler, CURLOPT_URL, "http://{$this->host}:{$this->port}/query?" . http_build_query($fullUrl));
         curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, TRUE);
         $response = curl_exec($curl_handler);
         $errno = curl_errno($curl_handler);
         &nbsp;
         if(!$errno) {
             $httpCode = curl_getinfo($curl_handler, CURLINFO_HTTP_CODE);
             $response = json_decode($response, true);
             &nbsp;
             if($httpCode == "200") {
                 curl_close($curl_handler);
                 return $response;
             }
             else {
                 $this->errno = $httpCode;
                 $this->errstr = $response["error"];
                 $this->errtype = "influxdb";
                 return false;
             }
         } else {
             $this->errno = $errno;
             $this->errstr = "curl error";
             $this->errtype = "curl";
             return false;
         }
     } else {
         $this->errno = 1;
         $this->errstr = "Undefined query";
         $this->errtype = "lib";
         return false;
     }
 }

		2 = 84
		3 = 126
	}
}

11:25:56.699 | OrionDocs Inf: Working on comment block #4
11:25:56.699 | OrionDocs Inf: 8 tags were found
11:25:56.703 | OrionDocs Inf: Comment Block #4 is:
11:25:56.703 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.getPoints
		1 = getPoints
		2 = getPoints
	}
	@description
	Groups: {
		0 = Parsea el resultado de un <a class="fancy-goto" onclick="goto('InfluxDB_query.html')">InfluxDB.query()</a> y devuelve los puntos de las tablas seleccionadas
		1 = Parsea el resultado de un <a class="fancy-goto" onclick="goto('InfluxDB_query.html')">InfluxDB.query()</a> y devuelve los puntos de las tablas seleccionadas
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@param
	Groups: {
		0 = {InfluxDBQuery} result - El resultado de un query ejecutado
		1 = InfluxDBQuery
		2 = InfluxDBQuery
		3 = result
		4 = El resultado de un query ejecutado
	}
	@example
	Groups: {
		0 = Ej. Seleccionar todos los datos de la variable "cpu" ~ $result = $influx->query("select * from cpu, cpu2");
if($result) {
    $points = <b>$influx->getPoints($result)</b>;
    $cpuPoints = $points["cpu"]; //array ([0] => array("time" => "...", "value" => "..."), [1] => array(...), ...);
} else {
    echo "Error " . $influx->getErrCode() . ": " . $influx->getErrMessage();
}
		1 = Ej. Seleccionar todos los datos de la variable "cpu"
		2 = $result = $influx->query("select * from cpu, cpu2");
if($result) {
    $points = <b>$influx->getPoints($result)</b>;
    $cpuPoints = $points["cpu"]; //array ([0] => array("time" => "...", "value" => "..."), [1] => array(...), ...);
} else {
    echo "Error " . $influx->getErrCode() . ": " . $influx->getErrMessage();
}
	}
	@returns
	Groups: {
		0 = {Boolean} <i>False</i> Cuando un error ocurre
		1 = Boolean
		2 = Boolean
		3 = <i>False</i> Cuando un error ocurre
	}
	@returns
	Groups: {
		0 = {Array[]} Arreglo asociativo con los datos de los puntos de todas las medidas seleccionadas
		1 = Array[]
		2 = Array
		3 = Arreglo asociativo con los datos de los puntos de todas las medidas seleccionadas
	}
	@sourcecode
	Groups: {
		0 = public function getPoints($result = false) {
     if($result) {
         $series = isset($result["results"][0]["series"]) ? $result["results"][0]["series"] : false;
         if($series) {
             $points = array();
             foreach($series as $serie) {
                 $measurement = $serie["name"];
                 $columns = $serie["columns"];
                 if(!isset($points[$measurement]))
                     $points[$measurement] = array();
                 &nbsp;
                 for($i = 0; $i < count($serie["values"]); $i++) {
                     $dataPoint = array();
                     for($j = 0; $j < count($serie["values"][$i]); $j++)
                         $dataPoint[$columns[$j]] = $serie["values"][$i][$j];
                     &nbsp;
                     if(isset($serie["tags"]))
                         $dataPoint = array_merge($dataPoint, $serie["tags"]);
                     &nbsp;
                     $points[$measurement][] = $dataPoint;
                 }
             }
             &nbsp;
             return $points;
         } else {
             $this->errno = 4;
             $this->errstr = "No series found";
             $this->errtype = "lib";
             return false;
         }
     } else {
         $this->errno = 3;
         $this->errstr = "Undefined result set";
         $this->errtype = "lib";
         return false;
     }
 }

		1 = public function getPoints($result = false) {
     if($result) {
         $series = isset($result["results"][0]["series"]) ? $result["results"][0]["series"] : false;
         if($series) {
             $points = array();
             foreach($series as $serie) {
                 $measurement = $serie["name"];
                 $columns = $serie["columns"];
                 if(!isset($points[$measurement]))
                     $points[$measurement] = array();
                 &nbsp;
                 for($i = 0; $i < count($serie["values"]); $i++) {
                     $dataPoint = array();
                     for($j = 0; $j < count($serie["values"][$i]); $j++)
                         $dataPoint[$columns[$j]] = $serie["values"][$i][$j];
                     &nbsp;
                     if(isset($serie["tags"]))
                         $dataPoint = array_merge($dataPoint, $serie["tags"]);
                     &nbsp;
                     $points[$measurement][] = $dataPoint;
                 }
             }
             &nbsp;
             return $points;
         } else {
             $this->errno = 4;
             $this->errstr = "No series found";
             $this->errtype = "lib";
             return false;
         }
     } else {
         $this->errno = 3;
         $this->errstr = "Undefined result set";
         $this->errtype = "lib";
         return false;
     }
 }

		2 = 145
		3 = 181
	}
}

11:25:56.704 | OrionDocs Inf: Working on comment block #5
11:25:56.704 | OrionDocs Inf: 6 tags were found
11:25:56.707 | OrionDocs Inf: Comment Block #5 is:
11:25:56.708 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.write
		1 = write
		2 = write
	}
	@description
	Groups: {
		0 = Escribe en la base de datos la información de una medida especificada
		1 = Escribe en la base de datos la información de una medida especificada
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@returns
	Groups: {
		0 = {Boolean} "False" Cuando un error ocurre
		1 = Boolean
		2 = Boolean
		3 = "False" Cuando un error ocurre
	}
	@returns
	Groups: {
		0 = {Boolean} "True" Si se realizó la inserción correctamente
		1 = Boolean
		2 = Boolean
		3 = "True" Si se realizó la inserción correctamente
	}
	@sourcecode
	Groups: {
		0 = public function write($measurement) {
     if($measurement instanceof Measurement) {
         $points = $measurement->getPoints();
         $insertData = "";
         for($i = 0; $i < count($points); $i++) {
             $data = $measurement->getName() . "," . http_build_query($points[$i]->getTags(), "", ",") . " value=" . $points[$i]->getValue() . " " . $points[$i]->getTimestamp();
             $insertData .= $data . "\n";
         }
         &nbsp;
         $curl_handler = curl_init();
         $fullUrl = array (
                         "db" => $this->db,
                         "u" => $this->user,
                         "p" => $this->password
                     );
         curl_setopt($curl_handler, CURLOPT_URL, "http://{$this->host}:{$this->port}/write?" . http_build_query($fullUrl));
         curl_setopt($curl_handler, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
         curl_setopt($curl_handler, CURLOPT_CUSTOMREQUEST, "POST");
         curl_setopt($curl_handler, CURLOPT_BINARYTRANSFER, TRUE);
         curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, TRUE);
         curl_setopt($curl_handler, CURLOPT_POSTFIELDS, $insertData);
         $response = curl_exec($curl_handler);
         $errno = curl_errno($curl_handler);
         &nbsp;
         if(!$errno) {
             $httpCode = curl_getinfo($curl_handler, CURLINFO_HTTP_CODE);
             $response = json_decode($response, true);
             &nbsp;
             if($httpCode == "204") {
                 curl_close($curl_handler);
                 return true;
             } else {
                 $this->errno = $httpCode;
                 $this->errstr = $response["error"];
                 $this->errtype = "influxdb";
                 return false;
             }
         } else {
             $this->errno = $errno;
             $this->errstr = "curl error";
             $this->errtype = "curl";
             return false;
         }
     } else {
         $this->errno = 2;
         $this->errstr = "Undefined measurement or data incomplete";
         $this->errtype = "lib";
         return false;
     }
 }

		1 = public function write($measurement) {
     if($measurement instanceof Measurement) {
         $points = $measurement->getPoints();
         $insertData = "";
         for($i = 0; $i < count($points); $i++) {
             $data = $measurement->getName() . "," . http_build_query($points[$i]->getTags(), "", ",") . " value=" . $points[$i]->getValue() . " " . $points[$i]->getTimestamp();
             $insertData .= $data . "\n";
         }
         &nbsp;
         $curl_handler = curl_init();
         $fullUrl = array (
                         "db" => $this->db,
                         "u" => $this->user,
                         "p" => $this->password
                     );
         curl_setopt($curl_handler, CURLOPT_URL, "http://{$this->host}:{$this->port}/write?" . http_build_query($fullUrl));
         curl_setopt($curl_handler, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
         curl_setopt($curl_handler, CURLOPT_CUSTOMREQUEST, "POST");
         curl_setopt($curl_handler, CURLOPT_BINARYTRANSFER, TRUE);
         curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, TRUE);
         curl_setopt($curl_handler, CURLOPT_POSTFIELDS, $insertData);
         $response = curl_exec($curl_handler);
         $errno = curl_errno($curl_handler);
         &nbsp;
         if(!$errno) {
             $httpCode = curl_getinfo($curl_handler, CURLINFO_HTTP_CODE);
             $response = json_decode($response, true);
             &nbsp;
             if($httpCode == "204") {
                 curl_close($curl_handler);
                 return true;
             } else {
                 $this->errno = $httpCode;
                 $this->errstr = $response["error"];
                 $this->errtype = "influxdb";
                 return false;
             }
         } else {
             $this->errno = $errno;
             $this->errstr = "curl error";
             $this->errtype = "curl";
             return false;
         }
     } else {
         $this->errno = 2;
         $this->errstr = "Undefined measurement or data incomplete";
         $this->errtype = "lib";
         return false;
     }
 }

		2 = 191
		3 = 240
	}
}

11:25:56.709 | OrionDocs Inf: Working on comment block #6
11:25:56.709 | OrionDocs Inf: 5 tags were found
11:25:56.710 | OrionDocs Inf: Comment Block #6 is:
11:25:56.711 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.getErrCode
		1 = getErrCode
		2 = getErrCode
	}
	@description
	Groups: {
		0 = Devuelve el código del último error
		1 = Devuelve el código del último error
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@returns
	Groups: {
		0 = {Integer} El código del error
		1 = Integer
		2 = Integer
		3 = El código del error
	}
	@sourcecode
	Groups: {
		0 = public function getErrCode() {
     return $this->errno;
 }

		1 = public function getErrCode() {
     return $this->errno;
 }

		2 = 249
		3 = 251
	}
}

11:25:56.712 | OrionDocs Inf: Working on comment block #7
11:25:56.712 | OrionDocs Inf: 5 tags were found
11:25:56.716 | OrionDocs Inf: Comment Block #7 is:
11:25:56.716 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.getErrMessage
		1 = getErrMessage
		2 = getErrMessage
	}
	@description
	Groups: {
		0 = Devuelve el mensaje del último error
		1 = Devuelve el mensaje del último error
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@returns
	Groups: {
		0 = {String} El mensaje del error
		1 = String
		2 = String
		3 = El mensaje del error
	}
	@sourcecode
	Groups: {
		0 = public function getErrMessage() {
     return $this->errstr;
 }

		1 = public function getErrMessage() {
     return $this->errstr;
 }

		2 = 260
		3 = 262
	}
}

11:25:56.717 | OrionDocs Inf: Working on comment block #8
11:25:56.717 | OrionDocs Inf: 5 tags were found
11:25:56.719 | OrionDocs Inf: Comment Block #8 is:
11:25:56.719 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.getErrType
		1 = getErrType
		2 = getErrType
	}
	@description
	Groups: {
		0 = Devuelve el tipo del último error
		1 = Devuelve el tipo del último error
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@returns
	Groups: {
		0 = {String} El tipo del error. Los tipos devueltos son: "lib", propio de la librería; "curl", error de ejecución de curl; "influxdb", error de InfluxDB
		1 = String
		2 = String
		3 = El tipo del error. Los tipos devueltos son: "lib", propio de la librería; "curl", error de ejecución de curl; "influxdb", error de InfluxDB
	}
	@sourcecode
	Groups: {
		0 = public function getErrType() {
     return $this->errtype;
 }

		1 = public function getErrType() {
     return $this->errtype;
 }

		2 = 271
		3 = 273
	}
}

11:25:56.720 | OrionDocs Inf: Working on comment block #9
11:25:56.720 | OrionDocs Inf: 5 tags were found
11:25:56.722 | OrionDocs Inf: Comment Block #9 is:
11:25:56.722 | Type: @method
Tags: {
	@method
	Groups: {
		0 = InfluxDB.lastError
		1 = lastError
		2 = lastError
	}
	@description
	Groups: {
		0 = Devuelve la cadena en <span class='param-type param-type-string'>String</span> del último error generado
		1 = Devuelve la cadena en <span class='param-type param-type-string'>String</span> del último error generado
	}
	@exposure
	Groups: {
		0 = public
		1 = public
	}
	@returns
	Groups: {
		0 = {String} Mensaje de error generado
		1 = String
		2 = String
		3 = Mensaje de error generado
	}
	@sourcecode
	Groups: {
		0 = public function lastError() {
     return "[" . self::getErrType() . "] Error #" . self::getErrCode() . ": " . self::getErrMessage();
 }

		1 = public function lastError() {
     return "[" . self::getErrType() . "] Error #" . self::getErrCode() . ": " . self::getErrMessage();
 }

		2 = 282
		3 = 284
	}
}

11:25:56.725 | OrionDocs Inf: Project directory 'dist/InfluxDB' has been created.
11:25:56.725 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB___construct.html' has been created.
11:25:56.734 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.735 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_setPrecision.html' has been created.
11:25:56.740 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.741 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_query.html' has been created.
11:25:56.747 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.748 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_getPoints.html' has been created.
11:25:56.753 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.754 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_write.html' has been created.
11:25:56.759 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.760 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_getErrCode.html' has been created.
11:25:56.764 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.765 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_getErrMessage.html' has been created.
11:25:56.769 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.770 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_getErrType.html' has been created.
11:25:56.773 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.774 | OrionDocs Inf: StreamWriter for file 'dist/InfluxDB/InfluxDB_lastError.html' has been created.
11:25:56.777 | OrionDocs Inf: StreamWriter has finished without errors.
11:25:56.891 | OrionDocs Inf: Dir copied from: 'C:\Users\Víctor\Documents\Visual Studio 2017\Projects\OrionDocs\OrionDocs\bin\Debug\templates\Fancy_en\img' to 'dist/InfluxDB\img'.
11:25:57.041 | OrionDocs Inf: Dir copied from: 'C:\Users\Víctor\Documents\Visual Studio 2017\Projects\OrionDocs\OrionDocs\bin\Debug\templates\Fancy_en\css' to 'dist/InfluxDB\css'.
11:25:57.184 | OrionDocs Inf: Dir copied from: 'C:\Users\Víctor\Documents\Visual Studio 2017\Projects\OrionDocs\OrionDocs\bin\Debug\templates\Fancy_en\fa' to 'dist/InfluxDB\fa'.
11:25:57.207 | OrionDocs Inf: Dir copied from: 'C:\Users\Víctor\Documents\Visual Studio 2017\Projects\OrionDocs\OrionDocs\bin\Debug\templates\Fancy_en\js' to 'dist/InfluxDB\js'.
11:25:57.228 | OrionDocs Inf: Dir copied from: 'C:\Users\Víctor\Documents\Visual Studio 2017\Projects\OrionDocs\OrionDocs\bin\Debug\templates\Fancy_en\prism' to 'dist/InfluxDB\prism'.

